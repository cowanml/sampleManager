[tox]
envlist =
    clean,
    check,
{% for env in tox_environments|sort %}
    {{ env }},
{% endfor %}
    report,
    docs

[testenv]
setenv =
    PYTHONPATH={toxinidir}/tests
    PYTHONUNBUFFERED=yes
usedevelop = true
deps =
    pytest
    pytest-capturelog
    pytest-cov
    -r{toxinidir}/docs/requirements.txt
whitelist_externals =
    cp
# theres gotta be a better way then 'cp' here?
commands =
    cp -f {toxinidir}/samplemanager.conf {homedir}/.samplemanager.conf 
    {posargs:py.test -vv --cov=src}

[testenv:spell]
setenv =
    SPELLCHECK = 1
commands =
    sphinx-build -b spelling docs dist/docs
deps =
    sphinx
    sphinxcontrib-napoleon
    sphinx-py3doc-enhanced-theme
    sphinxcontrib-spelling
    pyenchant
#    -r{toxinidir}/docs/requirements.txt

[testenv:docs]
whitelist_externals =
    rm
commands =
    rm -rf dist/docs || rmdir /S /Q dist\docs
    sphinx-build -b html docs dist/docs
    sphinx-build -b linkcheck docs dist/docs
deps =
    sphinx
    sphinxcontrib-napoleon
    sphinx-py3doc-enhanced-theme
#    -r{toxinidir}/docs/requirements.txt

[testenv:configure]
deps =
    jinja2
    matrix
commands =
    python bootstrap.py

[testenv:flake8]
deps =
    flake8
commands =
    flake8 src

[testenv:pep8]
deps =
    pep8
commands =
    pep8 src

[testenv:check]
basepython = python3.4
deps =
    docutils
    check-manifest
#    flake8
    collective.checkdocs
commands =
    python setup.py checkdocs
    python setup.py check --restructuredtext --strict --metadata
    check-manifest {toxinidir}
#    flake8 src

[testenv:coveralls]
deps =
    coveralls
commands =
    coverage combine
    coverage report
    coveralls

[testenv:report]
basepython = python3.4
commands =
    coverage combine
    coverage report
deps = coverage

[testenv:clean]
commands = coverage erase
deps = coverage

{% for env, config in tox_environments|dictsort %}
[testenv:{{ env }}]
basepython = {{ config.python }}
{% if config.cover or config.env_vars %}
setenv =
    {[testenv]setenv}
{% endif %}
{% for var in config.env_vars %}
    {{ var }}
{% endfor %}
{% if config.cover %}
    WITH_COVERAGE=yes
{% endif %}
deps =
    {[testenv]deps}
{% for dep in config.deps %}
    {{ dep }}
{% endfor %}

{% endfor %}


